import os
import sys
from natsort import natsorted, ns
import csv
import scipy.io as sio

OUTPUT_FILE_NAME = "Result.csv"


def experiment_configuration(directory) -> dict:
    """
    Returns a dictionary containing the number of runs, the name of the algorithms, and the name of the problems used
    in the experiments performed with PlatEMO.

    :param directory: Folder containing the Setting.mat file generated by PlatEMO
    :return: A dictionary with information of runs, algorithms, and problems
    """
    result = dict()
    data = sio.loadmat(os.path.join(directory, 'Setting.mat'), simplify_cells=True)

    result['runs'] = data['Environment'][0]
    result['algorithms'] = data['Setting'][0].tolist()
    result['problems'] = data['Setting'][1].tolist()

    return result


def get_mat_files(directory) -> list:
    """
    Return a list containing the absolute path of all files with extension .mat in the given folder. The returning
    list will exclude the Setting.mat file generated by PlatEMO.

    :param directory: Folder containing output files of PlatEMO. It is usually a folder containing the Setting.mat file
    :return: A list with the absolut path of all files with extension .mat, excluding the configuration file Setting.mat
    """
    result = list()
    for subdir, dirs, files in os.walk(directory):
        for file in files:
            if file != "Setting.mat" and file.endswith('.mat'):
                filepath = os.path.join(subdir, file)
                result.append(filepath)
    return result


def main():
    """
    The program takes a string as argument, which specifies the folder generated by PlatEMO when performing experiments.
    It processes all .mat files in the given folder, and it generates, as output, the OUTPUT_FILE_NAME file combining
    all data of each run for each algorithm, problem, and metric. This generated file is useful to have all metric
    values for analysis.

    The program assumes that .mat file names follow the format given by PlatEMO for experiments. For instance, the file
    GWASFGA_DTLZ1_M3_D7_1.mat is generated by PlatEMO when running the GWASFGA algorithm, over the DTLZ1 problem with
    three objective functions and seven decision variables. The last number, before the .mat extension, refers to the
    run number.

    :return: -1 if the program fails
    """
    # Total arguments
    n = len(sys.argv)

    # The program fails when the program receives more than one argument
    if n != 2:
        print("Error: one argument is expected to run this program (folder containing PlatEMO mat files)")
        exit(-1)

    folder = sys.argv[1]

    # Get list of mat files in the folder
    files = get_mat_files(folder)

    # Sort list of files
    files = natsorted(files, alg=ns.IGNORECASE)

    # Create and fill the output file
    with open(os.path.join(folder, OUTPUT_FILE_NAME), 'w') as f:
        # Create the csv writer
        writer = csv.writer(f)

        # Header for the outoput file
        row = ["algorithm", "problem", "M", "D", "run", "metric", "value"]

        # Write the header to the csv file
        writer.writerow(row)

        # Process each mat file in the folder
        for file in files:
            print("Processing file '{}' ...".format(file))

            file_name = os.path.basename(file).split('.')[0]
            tokens = file_name.split("_")

            algorithm = tokens[0]  # algorithm name
            problem = tokens[1]  # problem name
            objectives = tokens[2].split('M')[1]  # number of objective functions
            decision_variables = tokens[3].split('D')[1]  # number of decision variables
            run = int(tokens[4])  # number of runs

            data = sio.loadmat(file, simplify_cells=True)
            metrics = [*data['metric'].keys()]  # metric values

            # Process metric values in current file
            for metric in metrics:
                value = data['metric'][metric]  # metric value

                # Metric value for current metric, algorithm, problem, and run
                row = [algorithm, problem, objectives, decision_variables, run, metric, value]

                # Write the row to the csv file
                writer.writerow(row)


if __name__ == "__main__":
    main()
